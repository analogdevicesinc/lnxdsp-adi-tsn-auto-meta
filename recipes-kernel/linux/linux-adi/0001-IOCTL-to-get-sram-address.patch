diff --git a/arch/arm/boot/dts/sc594-som-ezkit.dts b/arch/arm/boot/dts/sc594-som-ezkit.dts
index 2c4a0901a070..69e09a6ac2ae 100644
--- a/arch/arm/boot/dts/sc594-som-ezkit.dts
+++ b/arch/arm/boot/dts/sc594-som-ezkit.dts
@@ -423,5 +423,5 @@
 };
 
 &sram_mmap {
-	status = "disabled";
+	status = "okay";
 };
diff --git a/drivers/misc/adi/sram_mmap.c b/drivers/misc/adi/sram_mmap.c
index b177d82520e8..8859d403ae0e 100644
--- a/drivers/misc/adi/sram_mmap.c
+++ b/drivers/misc/adi/sram_mmap.c
@@ -16,9 +16,12 @@
 #include <linux/genalloc.h>
 #include <linux/miscdevice.h>
 #include <linux/platform_device.h>
+#include <linux/version.h>
 #include <mach/cpu.h>
 #include <mach/hardware.h>
-#ifdef CONFIG_ARCH_SC58X
+#ifdef CONFIG_ARCH_SC59X
+#include <mach/sc59x.h>
+#elif defined(CONFIG_ARCH_SC58X)
 #include <mach/sc58x.h>
 #elif defined(CONFIG_ARCH_SC57X)
 #include <mach/sc57x.h>
@@ -26,6 +29,10 @@
 
 #define SRAM_MMAP_DRV_NAME		"sram_mmap"
 
+#define PHYSADDR _IOR(0x6B,0x01,unsigned long)
+
+static unsigned long paddr = 0;
+
 struct adi_sram_mmap {
 	struct miscdevice miscdev;
 	struct gen_pool *sram_pool;
@@ -68,7 +75,6 @@ static int sram_mmap(struct file *fp, struct vm_area_struct *vma)
 				struct adi_sram_mmap, miscdev);
 	struct mmap_private_data *pdata;
 	size_t sram_size = vma->vm_end - vma->vm_start;
-	unsigned long paddr;
 	int ret = 0;
 
 	/*  Allocate private pdata */
@@ -109,8 +115,29 @@ static int sram_mmap(struct file *fp, struct vm_area_struct *vma)
 	return ret;
 }
 
+static long sram_ioctl(struct file *file,unsigned int cmd, unsigned long arg)
+{
+	int err=0;
+
+	if(_IOC_DIR(cmd) & _IOC_READ)
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 0, 0))
+		err = !access_ok((void __user *)arg, _IOC_SIZE(cmd));
+#else
+		err = !access_ok(VERIFY_WRITE, (void __user *)arg, _IOC_SIZE(cmd));
+#endif
+	switch (cmd)
+	{
+	case PHYSADDR:
+		put_user(paddr,(unsigned long __user *)arg);
+		break;
+	default:
+		break;
+	}
+}
+
 static const struct file_operations sram_fops = {
 	.mmap		= sram_mmap,
+	.unlocked_ioctl = sram_ioctl,
 };
 
 static const struct of_device_id adi_sram_mmap_of_match[] = {
